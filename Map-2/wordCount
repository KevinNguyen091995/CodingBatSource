The classic word-count algorithm: given an array of strings, return a Map<String, Integer> with a key for each different string, with the value the number of times that string appears in the array.


wordCount(["a", "b", "a", "c", "b"]) → {"a": 2, "b": 2, "c": 1}
wordCount(["c", "b", "a"]) → {"a": 1, "b": 1, "c": 1}
wordCount(["c", "c", "c", "c"]) → {"c": 4}

public Map<String, Integer> wordCount(String[] strings) {
  HashMap<String, Integer> newMap = new HashMap<>();
  
  for(int i = 0; i < strings.length; i++){
    newMap.put(strings[i], 0);
  }
  
  for(int i = 0; i < strings.length; i++){
    if(newMap.containsKey(strings[i])){
      newMap.put(strings[i], newMap.get(strings[i]) + 1);
    }
  }
  
  return newMap;
}

Expected	Run		
wordCount(["a", "b", "a", "c", "b"]) → {"a": 2, "b": 2, "c": 1}	{"a": 2, "b": 2, "c": 1}	OK	
wordCount(["c", "b", "a"]) → {"a": 1, "b": 1, "c": 1}	{"a": 1, "b": 1, "c": 1}	OK	
wordCount(["c", "c", "c", "c"]) → {"c": 4}	{"c": 4}	OK	
wordCount([]) → {}	{}	OK	
wordCount(["this", "and", "this", ""]) → {"": 1, "and": 1, "this": 2}	{"": 1, "and": 1, "this": 2}	OK	
wordCount(["x", "y", "x", "Y", "X"]) → {"x": 2, "X": 1, "y": 1, "Y": 1}	{"x": 2, "X": 1, "y": 1, "Y": 1}	OK	
wordCount(["123", "0", "123", "1"]) → {"0": 1, "1": 1, "123": 2}	{"0": 1, "1": 1, "123": 2}	OK	
wordCount(["d", "a", "e", "d", "a", "d", "b", "b", "z", "a", "a", "b", "z", "x", "b", "f", "x", "two", "b", "one", "two"]) → {"a": 4, "b": 5, "d": 3, "e": 1, "f": 1, "one": 1, "x": 2, "z": 2, "two": 2}	{"a": 4, "b": 5, "d": 3, "e": 1, "f": 1, "one": 1, "x": 2, "z": 2, "two": 2}	OK	
wordCount(["apple", "banana", "apple", "apple", "tea", "coffee", "banana"]) → {"banana": 2, "apple": 3, "tea": 1, "coffee": 1}	{"banana": 2, "apple": 3, "tea": 1, "coffee": 1}	OK	
other tests
OK	

All Correct
