Given a string, compute a new string by moving the first char to come after the next two chars, so "abc" yields "bca". 
Repeat this process for each subsequent group of 3 chars, so "abcdef" yields "bcaefd". Ignore any group of fewer than 3 chars at the end.


oneTwo("abc") → "bca"
oneTwo("tca") → "cat"
oneTwo("tcagdo") → "catdog"

public String oneTwo(String str) {
  StringBuilder newStr = new StringBuilder();
  
  if(str.length() < 3) return "";
  
  for(int i = 0; i < str.length()-2; i++){
    if(i % 3 == 0){
    newStr.append(str.substring(i+1,i+3));
    newStr.append(str.charAt(i));
    }
  }
  
  
  return newStr.toString();
}

Expected	Run		
oneTwo("abc") → "bca"	"bca"	OK	
oneTwo("tca") → "cat"	"cat"	OK	
oneTwo("tcagdo") → "catdog"	"catdog"	OK	
oneTwo("chocolate") → "hocolctea"	"hocolctea"	OK	
oneTwo("1234567890") → "231564897"	"231564897"	OK	
oneTwo("xabxabxabxabxabxabxab") → "abxabxabxabxabxabxabx"	"abxabxabxabxabxabxabx"	OK	
oneTwo("abcdefx") → "bcaefd"	"bcaefd"	OK	
oneTwo("abcdefxy") → "bcaefd"	"bcaefd"	OK	
oneTwo("abcdefxyz") → "bcaefdyzx"	"bcaefdyzx"	OK	
oneTwo("") → ""	""	OK	
oneTwo("x") → ""	""	OK	
oneTwo("xy") → ""	""	OK	
oneTwo("xyz") → "yzx"	"yzx"	OK	
oneTwo("abcdefghijklkmnopqrstuvwxyz1234567890") → "bcaefdhigkljmnkpqostrvwuyzx231564897"	"bcaefdhigkljmnkpqostrvwuyzx231564897"	OK	
oneTwo("abcdefghijklkmnopqrstuvwxyz123456789") → "bcaefdhigkljmnkpqostrvwuyzx231564897"	"bcaefdhigkljmnkpqostrvwuyzx231564897"	OK	
oneTwo("abcdefghijklkmnopqrstuvwxyz12345678") → "bcaefdhigkljmnkpqostrvwuyzx231564"	"bcaefdhigkljmnkpqostrvwuyzx231564"	OK	
other tests
OK	

All Correct
